Finite Element Analysis Tutorial: tutorial_sparse_solver.ipynb

The script starts by importing several modules from a custom finiteelementanalysis package
Defining the Geometry: define_sample_problem_geom
The first function defined is define_sample_problem_geom Inside this function, it calls pre.generate_rect_mesh_2d, assigning the returned values to coords and connect.
  Stepping into: generate_rect_mesh_2d
  The function generate_rect_mesh_2d is designed to create a 2D rectangular mesh based on a specified element type and domain dimensions.
  Inside the function, it checks the value of ele_type and dispatches to a helper function accordingly.
  If ele_type doesn’t match any of these, it raises a ValueError with a message indicating an unknown element type.

step out
Defining Problem Information: define_sample_problem_info
This function does several things in sequence to set up the problem. First, it identifies the boundaries by calling pre.identify_rect_boundaries, storing the results in boundary_nodes and boundary_edges.
  Stepping into: identify_rect_boundaries
  identifies boundary nodes and edges for a rectangular 2D mesh.
  It starts by determining the number of nodes (n_nodes) and elements (n_elems) from the shapes of coords and connect. It initializes four empty sets—left_nodes, right_nodes, bottom_nodes, and top_nodes—to store boundary node indices.
  The function then loops over all node indices from 0 to n_nodes - 1. For each node, it extracts the xval and yval from coords[nid] and checks their proximity to the domain bounds using the tolerance tol.
  If the absolute difference between xval and x_lower is less than tol, it adds the node index to left_nodes.
  Similarly, it checks xval against x_upper for right_nodes, yval against y_lower for bottom_nodes, and yval against y_upper for top_nodes.
  Next, it calls local_faces_for_element_type that has been explained previously

step out
Next, it fixes the left boundary by calling pre.assign_fixed_nodes_rect
  stepping into: assign_fixed_nodes_rect
  The function assign_fixed_nodes_rect sets up prescribed boundary conditions for nodes on a specified boundary.
  It retrieves node indices for the specified boundary, returning an empty array if none exist.
  It builds a list of constraints by adding (node_id, dof, value) tuples for non-None displacements, returning an empty array if no constraints are added.
  Otherwise, it converts the list to a transposed NumPy array. For your call with "left", it fixes both DOFs to zero, returning this array.

step out
After that, it assigns a distributed load on the right boundary.
It sets q to 10.0 and calls pre.assign_uniform_load_rect storing the result in dload_info.
  stepping into: assign_fixed_nodes_rect
  The function assign_uniform_load_rect defines a uniform load on boundary faces. It gets the face list for the boundary, returning an empty array if none exist. It initializes dload_info with shape (5, n_face_loads), sets elem_id and face_id for each face, and assigns traction components from a load list.

step out
Then, it defines material properties by setting mu to 10 and kappa to 100, creating a NumPy array material_props with these values.
Following that, it creates an artificial displacement field. It initializes displacement as a zero array with the same shape as coords using np.zeros((coords.shape)).
It then loops over each node index kk from 0 to the number of nodes (coords.shape[0]), setting the x-component of displacement[kk, 0] to coords[kk, 0] * 0.01, while the y-component remains zero.
Finally, the function returns displacement, material_props, fixed_nodes, and dload_info.

The script starts by defining variables for element type, mesh subdivisions, and domain size. 
It calls define_sample_problem_geom, which invokes pre.generate_rect_mesh_2d to create coords and connect for a 2D mesh. Stepping back, it then calls define_sample_problem_info, which uses pre.identify_rect_boundaries to find boundaries, pre.assign_fixed_nodes_rect to fix one boundary, and pre.assign_uniform_load_rect to apply a load on another, while also setting material properties and an artificial displacement field, returning these as variables.
  Stepping into: pre_demo.plot_mesh_2D
  The function pre_demo.plot_mesh_2D creates a Matplotlib figure and axis. It loops over connect, plotting "D2_nn8_quad" edges in gray using predefined pairs like (0,4) to (7,0).
  If gauss_points were given, it’d plot them, but it’s None here.

step out

The script now tests assembly times for finite element computations. It sets num_runs to 5 for repeated timing. It calls solver_demo.time_assemble_global_stiffness with num_runs, ele_type, transposed coords and connect, material_props, and transposed displacement, storing the average time in avg_time_global_stiffness.
  Stepping into: time_assemble_global_stiffness
  The function time_assemble_global_stiffness measures the average time to assemble the global stiffness matrix. It calls time_function_call with assemble.global_stiffness, passing ele_type, coords, connect, material_props, displacement, and num_runs, returning the average time in seconds.

step out
  Stepping into: solver_demo.time_assemble_global_traction
  The function time_assemble_global_traction times the global traction vector assembly. It invokes time_function_call with assemble.global_traction, using ele_type, coords, connect, dload_info, and num_runs, returning the average execution time in seconds.

step out
  Stepping into: time_assemble_global_residual
  The function time_assemble_global_residual calculates the average time for global residual vector assembly. It uses time_function_call with assemble.global_residual, passing ele_type, coords, connect, material_props, displacement, and num_runs, returning the average time in seconds.

step out
Finally, it prints the average times for stiffness, traction, and residual assembly in seconds, providing performance metrics for these operations.





